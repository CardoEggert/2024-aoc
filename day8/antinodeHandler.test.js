const {countAntinodes} = require('./antinodeHandler');

test('4x4 no changes', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.'
            ]
        ], false
    )).toBe(0);
});
test('4x4, antennas horizontally - 2 antinodes', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.'
            ],
            [
                '.', 'A', 'A', '.'
            ],
            [
                '.', '.', '.', '.'
            ]
        ], false
    )).toBe(2);
});
test('4x4, antennas vertically - 2 antinodes', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.'
            ],
            [
                '.', '.', 'A', '.'
            ],
            [
                '.', '.', 'A', '.'
            ],
            [
                '.', '.', '.', '.'
            ]
        ], false
    )).toBe(2);
});
test('4x4, antennas diagonally - 2 antinodes', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.'
            ],
            [
                '.', 'A', '.', '.'
            ],
            [
                '.', '.', 'A', '.'
            ],
            [
                '.', '.', '.', '.'
            ]
        ], false
    )).toBe(2);
});
test('3x3, antennas vertically - 2 antinodes - 1 out of bounds', () => {
    expect(countAntinodes([
            [
                '.', 'A', 'A'
            ],
            [
                '.', '.', '.'
            ],
            [
                '.', '.', '.'
            ]
        ], false
    )).toBe(1);
});
test('3x3, antennas horizontally - 2 antinodes - 1 out of bounds', () => {
    expect(countAntinodes([
            [
                '.', '.', 'A'
            ],
            [
                '.', '.', 'A'
            ],
            [
                '.', '.', '.'
            ]
        ], false
    )).toBe(1);
});
test('3x3, antennas - 12 antinodes - 7 out of bounds', () => {
    expect(countAntinodes([
            [
                '.', 'A', 'A'
            ],
            [
                '.', 'A', 'A'
            ],
            [
                '.', '.', '.'
            ]
        ], false
    )).toBe(5);
});
test('5x5, antennas diagonally - 2 antinodes - 1 out of bounds', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.', '.'
            ],
            [
                '.', '', '.', '.', '.'
            ],
            [
                '.', '.', 'A', '.', '.'
            ],
            [
                '.', '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.', 'A'
            ]
        ], false
    )).toBe(1);
});
test('5x5, antennasOverlapping', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.', '.'
            ],
            [
                '.', '', '.', '.', '.'
            ],
            [
                '.', '.', 'A', '.', '.'
            ],
            [
                '.', 'C', '.', '.', '.'
            ],
            [
                'C', '.', '.', '.', 'A'
            ]
        ], false
    )).toBe(2);
});
test('AoC example', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '0', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '0', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '0',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '0', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', 'A', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                'A', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', 'A', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ]
        ], false
    )).toBe(14);
});
test('AoC example w resonance', () => {
    expect(countAntinodes([
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '0', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '0', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '0',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '0', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', 'A', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                'A', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', 'A', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.', '.', '.'
            ]
        ], true
    )).toBe(34);
});
test('AoC T example w resonance', () => {
    expect(countAntinodes([
            [
                'T', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', 'T',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', 'T', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '#'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ],
            [
                '.', '.', '.', '.',
                '.', '.', '.', '.',
                '.', '.'
            ]
        ]
        , true
    )).toBe(9);
});